import numpy as np

from tensorflow.keras.datasets import fashion_mnist


def prepare_alligned_umap_data(embeddings, max_time_index=10):
    """Prepare data for running AllignedUMAP

    Args:
        embeddings: a dictionary, keys are batch number while values are
        embeddings extracted by a CNN after observing key number of batches.
        max_time_index: an integer indicating the maximum number of consecutive
        embeddings considered for UMAP reduction.

    Returns:
        list_embeddings: a list of numpy array, max_time_index array taken from
        embeddings.
        mappers: a list of dictionary, each dictionary map the entries of an
        embedding in list_embeddings with its correspective in the one that
        follow.
    """
    list_embeddings = []
    mappers = []
    for time_index in range(max_time_index):

        time_embedding = embeddings[time_index]
        list_embeddings.append(
            time_embedding
        )
        mappers.append(
            {embedding_index: embedding_index for
                embedding_index in range(time_embedding.shape[0])}
        )

    return list_embeddings, mappers[1:]


def load_data(loader=fashion_mnist, channels=1, batch_size=500, sample=1000):
    """Load data from a dataset loader.

    Args:
        loader: a dataset loader object, it can be any type of of object as
        far as it has a load_data method returning a train and test tuples.
        channels: an int, specifying the number of color channels in  the data
        batch_size: an int, specifying the number of samples in the batches
        used for training
        sample: an int, specifying the number of random samples taken the
        test data. This is done for reducing the number of embeddings
        extracted. This is because computing and visualizing the traces
        generated by AllignedUMAP is rather demanding.

    Returns:
        X_tr: a numpy array, training images for the model
        y_tr: a numpy array, training targets for the model
        X_ts: a numpy array, test images for the model
        y_ts: a numpy array, test targets for the model
    """
    train, test = loader.load_data()

    X_tr, y_tr = train
    X_ts, y_ts = test

    rows, columns = X_tr.shape[1], X_tr.shape[2]

    X_tr = X_tr.reshape(-1, rows, columns, channels)
    X_tr = X_tr.reshape(-1, batch_size, rows, columns, channels)

    y_tr = y_tr.reshape(-1, batch_size, channels)

    random_ind = np.random.choice(
        [i for i in range(X_ts.shape[0])],
        sample,
        replace=False
    )
    X_ts = X_ts.reshape(-1, rows, columns, channels)

    X_ts = X_ts[random_ind]
    y_ts = y_ts[random_ind]

    return X_tr, y_tr, X_ts, y_ts
